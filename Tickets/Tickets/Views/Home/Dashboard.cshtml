@model Tickets.Models.DashboardViewModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Sidebar</title>
    <link rel="stylesheet" href="~/css/dashboard.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="js/chart-setup.js"></script>

    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        .container {
            display: flex;
            width: 100%;
            height: 100%;
        }

        .sidebar {
            background-color: #444;
            color: white;
            padding: 20px;
            width: 200px;
            height: 100%;
            overflow-y: auto;
            transition: width 0.3s;
            display: flex;
            flex-direction: column;
            position: relative;
        }

            .sidebar.collapsed {
                width: 60px;
            }

            .sidebar ul {
                list-style-type: none;
                padding: 0;
                flex: 1;
            }

                .sidebar ul li {
                    margin: 25px 0;
                    text-align: center;
                }

                    .sidebar ul li a {
                        color: white;
                        text-decoration: none;
                        font-size: 16px;
                        <!--font-weight: bold;-->
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        transition: all 0.3s;
                    }

                        .sidebar ul li a i {
                            margin-right: 10px;
                            font-size: 24px; /* Make icons a bit larger */
                        }

                        .sidebar ul li a span {
                            display: inline-block;
                            transition: opacity 0.3s;
                            white-space: nowrap; /* Prevent text wrapping */
                        }

            .sidebar.collapsed ul li a span {
                opacity: 0;
                width: 0;
                margin-left: 0; /* Remove margin when collapsed */
            }

            .sidebar ul li a:hover {
                text-decoration: underline;
            }

            .sidebar.collapsed ul li a i {
                margin-right: 0;
            }

        .logout-item {
            margin-top: auto;
            padding-top: 20px;
        }

            .logout-item a {
                color: #fff;
                text-decoration: none;
                display: flex;
                align-items: center;
                justify-content: center;
            }

                .logout-item a i {
                    margin-right: 10px;
                    font-size: 24px;
                }

                .logout-item a span {
                    display: inline-block;
                    transition: opacity 0.3s;
                }

        .sidebar.collapsed .logout-item a span {
            opacity: 0;
            width: 0;
            margin-left: 0;
        }

        .logout-item a:hover {
            background-color: #555;
        }

        .sidebar.collapsed .logout-item a i {
            margin-right: 0;
        }

        .content {
            flex: 1;
            padding: 20px;
            background-color: #fff;
            overflow-y: auto;
        }

        footer {
            background-color: #333;
            color: white;
            text-align: center;
            padding: 10px;
            font-size: 14px;
        }

        .admin-icon-img {
            width: 70px;
            height: 70px;
            border-radius: 50%;
            display: block;
            margin: 0 auto;
            margin-bottom: 10px;
            transition: opacity 0.3s;
            margin-top: 50px;
        }

        .admin-icon p {
            text-align: center;
            margin-top: 5px;
            font-size: 16px;
            <!--font-weight: bold;-->
            transition: opacity 0.3s;
        }

        /* Expand the sidebar to a larger width */
        .sidebar.expanded {
            width: 300px; /* Expanded width */
        }

        .sidebar.collapsed .admin-icon p,
        .sidebar.collapsed .admin-icon-img {
            opacity: 0;
        }

        /* Sidebar Toggle Button on the Right Side with Close Icon */
        .sidebar-toggle {
            position: absolute;
            top: 0.2px;
            right: -150px; /* Move the button slightly outside the sidebar */
            background-color: #444;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            z-index: 1000;
            transition: right 0.3s;
            border-radius: 50%;
            padding: 1px; /* Increase padding to make the button larger */
            font-size: 20px; /* Increase the font size for a larger icon */
        }

        .sidebar.collapsed .sidebar-toggle {
            right: -25px;
        }

            .sidebar.collapsed .sidebar-toggle i {
                transform: rotate(180deg);
            }

        /* General styles for charts and tables */
        .charts-container {
            display: flex;
            
            flex-wrap: wrap;
            gap: 20px; /* Spacing between chart containers */
            padding: 20px; /* Optional padding around the container */
            overflow-x: auto; /* Enable horizontal scroll if necessary */
            box-sizing: border-box;
        }

        .chart-container {
            position: relative;
            flex: 1 1 calc(50% - 20px); /* Adjusts width based on available space */
            min-width: 300px; /* Ensures a minimum width for smaller screens */
            max-width: 100%;
            margin: 10px 0; /* Vertical margin for spacing */
            box-sizing: border-box; /* Ensures padding and border are included in width/height */
        }

        #priorityPieChart, #statusChart, #ticketCreated, #statusChartD {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            width: 100%;
            height: 300px; /* Adjust height as needed */
            box-sizing: border-box; /* Ensures padding and border are included in width/height */
        }

        canvas {
            width: 100% !important; /* Ensure canvas scales with container width */
            height: auto !important; /* Maintain aspect ratio */
            max-height: 300px; /* Set a maximum height to prevent overflow */
        }

        /* Additional styling to ensure text is below the chart */
        .chart-container h3 {
            margin: 10px 0; /* Margin to space text from the chart */
            text-align: center; /* Center the text */
        }

        .chart-container {
            display: flex;
            flex-direction: column;
            align-items: center; /* Center align the content */
        }

        #timePeriod {
            position: absolute;
            top: 42px; /* Chart ke upar ke edge se distance */
            right: 20px; /* Chart ke right edge se distance */
            z-index: 15; /* Ensure ki select box chart ke upar ho */
            background-color: rgba(255, 255, 255, 0.8); /* Background color to make it visible */
            padding: 5px;
            border-radius: 5px;
            font-size: 14px;
        }
    </style>
</head>
<body>

    <div class="container">
        <aside class="sidebar">
            <button class="sidebar-toggle" onclick="toggleSidebar()">
                <i class="fas fa-chevron-left"></i> <!-- Close icon -->
            </button>
            <div class="admin-icon">
                <img src="~/images/admin-icon.png" alt="Admin Icon" class="admin-icon-img" />
                <p>ADMIN</p>
            </div>

            <ul>
                <li><a href="/Home/Dashboard"><i class="fas fa-tachometer-alt"></i> <span>Dashboard</span></a></li>
              @*   <li><a href="/Ticket/Create"><i class="fas fa-ticket-alt"></i> <span>Tickets</span></a></li> *@
                <li><a href="/Ticket/PriorityDistribution"><i class="fas fa-star"></i> <span>Priority</span></a></li>
                 <li><a href="/Ticket/Index"><i class="fas fa-table"></i> <span>Ticket List</span></a></li>
                <li><a href="/Ticket/Status"><i class="fas fa-list-alt"></i> <span>Status</span></a></li>
           <!--    <li><a href="/Ticket/Deadline"><i class="fas fa-calendar-alt"></i> <span>Deadline</span></a></li> -->
                <li class="logout-item"><a href="/Account/Logout"><i class="fas fa-sign-out-alt"></i> <span>Logout</span></a></li>
            </ul>
        </aside>

        <main class="content">
            
           
            <div class="charts-container">
                <!-- Priority Pie Chart -->
                <div class="chart-container">
                    <h3>Ticket Priority Distribution</h3>
                    <canvas id="priorityPieChart"></canvas>
                </div>

                <div class="chart-container">
                    <h3>Ticket Created</h3>
                    <select id="timePeriod" aria-label="Select Time Period">
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="yearly">Yearly</option>
                    </select>
                    <canvas id="ticketCreated"></canvas>
                </div>

                <div class="chart-container">
                    <h3>Ticket Status Distribution</h3>
                    <canvas id="statusChartD"></canvas>

                </div>
                <!-- Status Bar Chart -->
                <div class="chart-container">
                    <h3>Ticket Status Distribution</h3>
                    <canvas id="statusChart"></canvas>

                </div>
            </div>

        </main>
    </div>

    <script>
        var ctx = document.getElementById('priorityPieChart').getContext('2d');
        var priorityPieChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['High', 'Medium', 'Low'],
                datasets: [{
                    data: [@Model.HighPriorityTickets, @Model.MediumPriorityTickets, @Model.LowPriorityTickets],
                    backgroundColor: ['#FF6384', '#FFCE56', '#36A2EB']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });
    </script>

     <script>
        var ctx = document.getElementById('statusChartD').getContext('2d');
        var statusChartD = new Chart(ctx, {
            type: 'bar', // You can also use 'pie' or 'doughnut' if you prefer
            data: {
                labels: @Html.Raw(Json.Serialize(Model.StatusChartData.Select(s => s.Status))),
                datasets: [{
                    label: 'Ticket Status Distribution',
                    data: @Html.Raw(Json.Serialize(Model.StatusChartData.Select(s => s.Count))),
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(153, 102, 255, 0.2)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(255, 99, 132, 1)',
                        'rgba(153, 102, 255, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
    <script>
        var ctx = document.getElementById('statusChart').getContext('2d');
        var statusChart = new Chart(ctx, {
            type: 'line', // You can also use 'pie' or 'doughnut' if you prefer
            data: {
                labels: @Html.Raw(Json.Serialize(Model.StatusChartData.Select(s => s.Status))),
                datasets: [{
                    label: 'Ticket Status Distribution',
                    data: @Html.Raw(Json.Serialize(Model.StatusChartData.Select(s => s.Count))),
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(153, 102, 255, 0.2)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(255, 99, 132, 1)',
                        'rgba(153, 102, 255, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var ctx = document.getElementById('ticketCreated').getContext('2d');
            var ticketsCreatedData = @Html.Raw(Json.Serialize(Model.TicketsCreatedByDate));
            var chart = null;

            function updateChart(period) {
                var transformedData = transformData(ticketsCreatedData, period);
                var dates = transformedData.map(data => data.date);
                var counts = transformedData.map(data => data.count);

                if (chart) {
                    chart.destroy();
                }

                chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: dates,
                        datasets: [{
                            label: 'Tickets Created',
                            data: counts,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: getAxisTitle(period)
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Count'
                                },
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            function getAxisTitle(period) {
                switch (period) {
                    case 'daily':
                        return 'Date';
                    case 'weekly':
                        return 'Week';
                    case 'monthly':
                        return 'Month';
                    case 'yearly':
                        return 'Year';
                    default:
                        return 'Date';
                }
            }

            function transformData(data, period) {
                const groupedData = {};

                data.forEach(item => {
                    let key;
                    const date = new Date(item.date);
                    switch (period) {
                        case 'daily':
                            key = date.toLocaleDateString(); // Format date as MM/DD/YYYY
                            break;
                        case 'weekly':
                            key = `${date.getFullYear()}-W${getWeekNumber(date)}`;
                            break;
                        case 'monthly':
                            key = `${date.getFullYear()}-${date.getMonth() + 1}`;
                            break;
                        case 'yearly':
                            key = `${date.getFullYear()}`;
                            break;
                    }

                    if (!groupedData[key]) {
                        groupedData[key] = 0;
                    }
                    groupedData[key] += item.count;
                });

                return Object.keys(groupedData).map(key => ({
                    date: key,
                    count: groupedData[key]
                }));
            }

            function getWeekNumber(date) {
                const startDate = new Date(date.getFullYear(), 0, 1);
                const days = Math.floor((date - startDate) / (24 * 60 * 60 * 1000));
                return Math.ceil((days + 1) / 7);
            }

            document.getElementById('timePeriod').addEventListener('change', function () {
                updateChart(this.value);
            });

            // Initial chart rendering
            updateChart('daily'); // Set default period if needed
        });

    </script>
    <script>
        // Toggle Sidebar Function
        function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            sidebar.classList.toggle('collapsed');
        }
    </script>

</body>
</html>
